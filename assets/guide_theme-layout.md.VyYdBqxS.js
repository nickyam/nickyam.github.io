import{_ as e,o as a,c as o,R as t}from"./chunks/framework.DO9dm5bS.js";const k=JSON.parse('{"title":"Layout","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"guide/theme-layout.md","filePath":"guide/theme-layout.md","lastUpdated":null}'),s={name:"guide/theme-layout.md"},d=t(`<h1 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h1><p>您可以通过设置 <code>layout</code> 选项为页面 <a href="./frontmatter.html">frontmatter</a> 来选择页面布局。 有 3 个布局选项，<code>doc</code>, <code>page</code>, 和 <code>home</code>。 如果未指定任何内容，则该页面被视为文档页面。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">doc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span></code></pre></div><h2 id="doc-布局" tabindex="-1">Doc 布局 <a class="header-anchor" href="#doc-布局" aria-label="Permalink to &quot;Doc 布局&quot;">​</a></h2><p><code>doc</code> 是默认布局，它将整个 Markdown 内容样式化为“文档”外观。 它的工作原理是将整个内容包装在 <code>vp-doc</code> css 类中，并将样式应用于它下面的元素。</p><p>几乎所有通用元素，例如 <code>p</code> 或 <code>h2</code> 都具有特殊样式。 因此，请记住，如果你在 Markdown 内容中添加任何自定义 HTML，这些元素也会受到这些样式的影响。</p><p>同时还提供下面列出的文档特定功能。这些功能仅在此布局中生效。</p><ul><li>Edit Link</li><li>Prev Next Link</li><li>Outline</li><li><a href="./theme-carbon-ads.html">Carbon Ads</a></li></ul><h2 id="page-布局" tabindex="-1">Page 布局 <a class="header-anchor" href="#page-布局" aria-label="Permalink to &quot;Page 布局&quot;">​</a></h2><p>选项 <code>page</code> 被视为“空白页”。 Markdown 仍然会被解析，并且所有 <a href="./markdown.html">Markdown Extensions</a> 与 <code>doc</code> 布局同样生效，但它不会获得任何默认样式。</p><p>页面布局可让您自行设计所有内容，而 VitePress 主题不会影响标签。 当您要创建自己的自定义页面时，这很有用。</p><p>注意，即使在此布局中，如果页面具有匹配的侧边栏配置，侧边栏仍会显示。</p><h2 id="home-布局" tabindex="-1">Home 布局 <a class="header-anchor" href="#home-布局" aria-label="Permalink to &quot;Home 布局&quot;">​</a></h2><p>选项 <code>home</code> 将生成模板化的“主页”。 在此布局中，您可以设置额外的选项，例如<code>hero</code>和<code>features</code> ，以进一步自定义内容。 请访问 <a href="./theme-home-page.html">主题：主页</a> 了解更多详情。</p><h2 id="no-布局" tabindex="-1">No 布局 <a class="header-anchor" href="#no-布局" aria-label="Permalink to &quot;No 布局&quot;">​</a></h2><p>如果你不想要任何布局，你可以通过frontmatter传递 <code>layout: false</code>。如果您想要一个完全可定制的登录页面(默认情况下没有任何侧边栏、导航栏或页脚)，这个选项很有用。</p>`,16),i=[d];function l(c,n,h,r,p,u){return a(),o("div",null,i)}const _=e(s,[["render",l]]);export{k as __pageData,_ as default};
