import{_ as s,o as i,c as a,R as e}from"./chunks/framework.DO9dm5bS.js";const g=JSON.parse('{"title":"资源处理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/asset-handling.md","filePath":"guide/asset-handling.md","lastUpdated":null}'),t={name:"guide/asset-handling.md"},n=e(`<h1 id="资源处理" tabindex="-1">资源处理 <a class="header-anchor" href="#资源处理" aria-label="Permalink to &quot;资源处理&quot;">​</a></h1><p>所有的 Markdown 文件都编译成 Vue 组件并由 <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">Vite</a> 处理。 你可以<strong>也应该</strong>使用相对路径引用资源：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">![</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">一张图片</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">./image.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>你可以在 markdown 文件、主题中的 <code>*.vue</code> 组件、styles里和纯 <code>.css</code> 文件中通过使用绝对公共路径（基于项目根目录）或相对路径（基于你的文件系统）引用静态资源。相对路径的方式类似于使用 <code>vue-cli</code> 或 webpack 的 <code>file-loader</code> 时所习惯的写法。</p><p>正常的图片、媒体和字体文件类型会被自动检测为静态资源。</p><p>所有引用的资源，包括使用绝对路径的资源，都将被复制到 dist 文件夹中，并在生产打包后生成哈希文件名。不会复制未引用的资源。与 <code>vue-cli</code> 一样，小于 4kb 的图片资源将编译成 base64 的内联样式。</p><p>所有资源路径引用，包括绝对路径，都应基于你的工作目录结构。</p><h2 id="public-文件" tabindex="-1">Public 文件 <a class="header-anchor" href="#public-文件" aria-label="Permalink to &quot;Public 文件&quot;">​</a></h2><p>有时你可能需要提供一些 Markdown 或主题组件中未直接引用的静态资源（例如，网站图标和 PWA 图标）。 项目根目录下的 <code>public</code> 目录（如果你正在运行 <code>vitepress build docs</code>，则为 <code>docs</code> 文件夹）将会保留，用以提供源代码中从未引用的静态资源（例如 <code>robots.txt</code> )和需要保留完全相同的文件名（不生成哈希）的资源。</p><p>放在 <code>public</code> 中的资源将会直接复制到 dist 的根目录。</p><p>注意，你应该使用根绝对路径引用放在 <code>public</code> 中的文件 - 例如，<code>public/icon.png</code> 在源代码中应始终引用为 <code>/icon.png</code>。</p><h2 id="base-url" tabindex="-1">Base URL <a class="header-anchor" href="#base-url" aria-label="Permalink to &quot;Base URL&quot;">​</a></h2><p>如果您的站点部署到非根 URL，则需要在 <code>.vitepress/config.js</code> 中设置 <code>base</code> 选项。 例如，如果你要将站点部署到 <code>https://foo.github.io/bar/</code>，那么 <code>base</code> 应该设置为 <code>&#39;/bar/&#39;</code>（以斜线开头和结尾）。</p><p>所有静态资源路径都会自动处理以适配不同的 <code>base</code> 配置值。例如，在 markdown 中对 <code>public</code> 下的资源使用绝对路径引用：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">![</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">An image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">/image-inside-public.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用这种引用方式，当你更改 <code>base</code> 配置值时无需再做修改。</p><p>但是，如果你正在创作一个动态链接到资产的主题组件，例如 <code>src</code> 基于主题配置值的图片：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">theme.logoPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>在这种情况下，建议使用 VitePress 提供的 <a href="./api.html#withbase"><code>withBase</code> 辅助函数</a> 来引用静态资源：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withBase, useData } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;withBase(theme.logoPath)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,20),h=[n];function l(p,d,k,o,c,r){return i(),a("div",null,h)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
